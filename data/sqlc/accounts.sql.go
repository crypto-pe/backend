// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO accounts(address, name, email)
VALUES ($1, $2, $3)
RETURNING address, name, created_at, email, admin
`

type CreateUserParams struct {
	Address string      `json:"address"`
	Name    string      `json:"name"`
	Email   interface{} `json:"email"`
}

// address	bytea
// name	character varying(60)
// created_at	timestamp NULL [now()]
// email	domain_email
// admin	boolean NULL [false]
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Address, arg.Name, arg.Email)
	var i Accounts
	err := row.Scan(
		&i.Address,
		&i.Name,
		&i.CreatedAt,
		&i.Email,
		&i.Admin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM accounts
WHERE address = $1
`

func (q *Queries) DeleteUser(ctx context.Context, address string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, address)
	return err
}

const getUser = `-- name: GetUser :one
SELECT address, name, created_at, email, admin FROM accounts WHERE address = $1
`

func (q *Queries) GetUser(ctx context.Context, address string) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getUser, address)
	var i Accounts
	err := row.Scan(
		&i.Address,
		&i.Name,
		&i.CreatedAt,
		&i.Email,
		&i.Admin,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE accounts 
SET
  name = $2,
  email = $3
WHERE address = $1
RETURNING address, name, created_at, email, admin
`

type UpdateUserParams struct {
	Address string      `json:"address"`
	Name    string      `json:"name"`
	Email   interface{} `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Address, arg.Name, arg.Email)
	var i Accounts
	err := row.Scan(
		&i.Address,
		&i.Name,
		&i.CreatedAt,
		&i.Email,
		&i.Admin,
	)
	return i, err
}
