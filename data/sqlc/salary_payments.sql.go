// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: salary_payments.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSalaryPayment = `-- name: CreateSalaryPayment :one

INSERT INTO salary_payments(organization_id, member_address, transaction_hash, amount, token, date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING payment_id, organization_id, member_address, transaction_hash, amount, token, date
`

type CreateSalaryPaymentParams struct {
	OrganizationID  uuid.UUID `json:"organizationID"`
	MemberAddress   []byte    `json:"memberAddress"`
	TransactionHash string    `json:"transactionHash"`
	Amount          int32     `json:"amount"`
	Token           []byte    `json:"token"`
	Date            time.Time `json:"date"`
}

// payment_id	uuid [uuid_generate_v4()]
// organization_id	uuid
// member_address	bytea
// transaction_hash	character(66)
// amount	integer
// token	bytea
// date	timestamp
func (q *Queries) CreateSalaryPayment(ctx context.Context, arg CreateSalaryPaymentParams) (SalaryPayments, error) {
	row := q.db.QueryRowContext(ctx, createSalaryPayment,
		arg.OrganizationID,
		arg.MemberAddress,
		arg.TransactionHash,
		arg.Amount,
		arg.Token,
		arg.Date,
	)
	var i SalaryPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrganizationID,
		&i.MemberAddress,
		&i.TransactionHash,
		&i.Amount,
		&i.Token,
		&i.Date,
	)
	return i, err
}

const getAllMemberSalaryPayments = `-- name: GetAllMemberSalaryPayments :many
SELECT payment_id, organization_id, member_address, transaction_hash, amount, token, date FROM salary_payments
WHERE member_address = $1
`

func (q *Queries) GetAllMemberSalaryPayments(ctx context.Context, memberAddress []byte) ([]SalaryPayments, error) {
	rows, err := q.db.QueryContext(ctx, getAllMemberSalaryPayments, memberAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalaryPayments
	for rows.Next() {
		var i SalaryPayments
		if err := rows.Scan(
			&i.PaymentID,
			&i.OrganizationID,
			&i.MemberAddress,
			&i.TransactionHash,
			&i.Amount,
			&i.Token,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalaryPayment = `-- name: GetSalaryPayment :one
SELECT payment_id, organization_id, member_address, transaction_hash, amount, token, date FROM salary_payments
WHERE transaction_hash = $1
`

func (q *Queries) GetSalaryPayment(ctx context.Context, transactionHash string) (SalaryPayments, error) {
	row := q.db.QueryRowContext(ctx, getSalaryPayment, transactionHash)
	var i SalaryPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrganizationID,
		&i.MemberAddress,
		&i.TransactionHash,
		&i.Amount,
		&i.Token,
		&i.Date,
	)
	return i, err
}
