// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: organization_members.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOrganizationMember = `-- name: CreateOrganizationMember :one

INSERT INTO organization_members(
  organization_id, member_address, date_joined, role, is_admin, salary
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING organization_id, member_address, date_joined, role, is_admin, salary
`

type CreateOrganizationMemberParams struct {
	OrganizationID uuid.UUID     `json:"organizationID"`
	MemberAddress  []byte        `json:"memberAddress"`
	DateJoined     time.Time     `json:"dateJoined"`
	Role           string        `json:"role"`
	IsAdmin        sql.NullBool  `json:"isAdmin"`
	Salary         sql.NullInt32 `json:"salary"`
}

// organization_id	uuid
// member_address	bytea
// date_joined	timestamp
// role	character varying(200)
// is_admin	boolean NULL [false]
// salary	integer NULL [0]
func (q *Queries) CreateOrganizationMember(ctx context.Context, arg CreateOrganizationMemberParams) (OrganizationMembers, error) {
	row := q.db.QueryRowContext(ctx, createOrganizationMember,
		arg.OrganizationID,
		arg.MemberAddress,
		arg.DateJoined,
		arg.Role,
		arg.IsAdmin,
		arg.Salary,
	)
	var i OrganizationMembers
	err := row.Scan(
		&i.OrganizationID,
		&i.MemberAddress,
		&i.DateJoined,
		&i.Role,
		&i.IsAdmin,
		&i.Salary,
	)
	return i, err
}

const deleteOrganizationMember = `-- name: DeleteOrganizationMember :exec
DELETE FROM organization_members
WHERE  organization_id = $1 AND member_address = $2
`

type DeleteOrganizationMemberParams struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	MemberAddress  []byte    `json:"memberAddress"`
}

func (q *Queries) DeleteOrganizationMember(ctx context.Context, arg DeleteOrganizationMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizationMember, arg.OrganizationID, arg.MemberAddress)
	return err
}

const getAllOrganizationMembers = `-- name: GetAllOrganizationMembers :many
SELECT organization_id, member_address, date_joined, role, is_admin, salary FROM organization_members 
WHERE organization_id = $1
`

func (q *Queries) GetAllOrganizationMembers(ctx context.Context, organizationID uuid.UUID) ([]OrganizationMembers, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrganizationMembers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationMembers
	for rows.Next() {
		var i OrganizationMembers
		if err := rows.Scan(
			&i.OrganizationID,
			&i.MemberAddress,
			&i.DateJoined,
			&i.Role,
			&i.IsAdmin,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgamizationMember = `-- name: GetOrgamizationMember :one
SELECT organization_id, member_address, date_joined, role, is_admin, salary FROM organization_members
WHERE organization_id = $1 AND member_address = $2
`

type GetOrgamizationMemberParams struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	MemberAddress  []byte    `json:"memberAddress"`
}

func (q *Queries) GetOrgamizationMember(ctx context.Context, arg GetOrgamizationMemberParams) (OrganizationMembers, error) {
	row := q.db.QueryRowContext(ctx, getOrgamizationMember, arg.OrganizationID, arg.MemberAddress)
	var i OrganizationMembers
	err := row.Scan(
		&i.OrganizationID,
		&i.MemberAddress,
		&i.DateJoined,
		&i.Role,
		&i.IsAdmin,
		&i.Salary,
	)
	return i, err
}

const getOrganizationRoles = `-- name: GetOrganizationRoles :many
SELECT DISTINCT role FROM organization_members
WHERE organization_id = $1
`

func (q *Queries) GetOrganizationRoles(ctx context.Context, organizationID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationRoles, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role string
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganizationMember = `-- name: UpdateOrganizationMember :one
UPDATE organization_members
SET
  date_joined = $3,
  role = $4, 
  is_admin = $5,
  salary = $6
WHERE organization_id = $1 AND member_address = $2
RETURNING organization_id, member_address, date_joined, role, is_admin, salary
`

type UpdateOrganizationMemberParams struct {
	OrganizationID uuid.UUID     `json:"organizationID"`
	MemberAddress  []byte        `json:"memberAddress"`
	DateJoined     time.Time     `json:"dateJoined"`
	Role           string        `json:"role"`
	IsAdmin        sql.NullBool  `json:"isAdmin"`
	Salary         sql.NullInt32 `json:"salary"`
}

func (q *Queries) UpdateOrganizationMember(ctx context.Context, arg UpdateOrganizationMemberParams) (OrganizationMembers, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationMember,
		arg.OrganizationID,
		arg.MemberAddress,
		arg.DateJoined,
		arg.Role,
		arg.IsAdmin,
		arg.Salary,
	)
	var i OrganizationMembers
	err := row.Scan(
		&i.OrganizationID,
		&i.MemberAddress,
		&i.DateJoined,
		&i.Role,
		&i.IsAdmin,
		&i.Salary,
	)
	return i, err
}
