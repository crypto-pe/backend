// Code generated by sqlc. DO NOT EDIT.
// source: organizations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one

INSERT INTO organizations(name, owner_address, token)
VALUES ($1, $2, $3)
RETURNING id, name, created_at, owner_address, token
`

type CreateOrganizationParams struct {
	Name         string `json:"name"`
	OwnerAddress []byte `json:"ownerAddress"`
	Token        []byte `json:"token"`
}

// id	uuid [uuid_generate_v4()]
// name	character varying(60)
// created_at	timestamp
// owner_address	bytea
// token	bytea
func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.OwnerAddress, arg.Token)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, created_at, owner_address, token FROM organizations
WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET
  name = $2,
  owner_address = $3,
  token = $4
WHERE id = $1
RETURNING id, name, created_at, owner_address, token
`

type UpdateOrganizationParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	OwnerAddress []byte    `json:"ownerAddress"`
	Token        []byte    `json:"token"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization,
		arg.ID,
		arg.Name,
		arg.OwnerAddress,
		arg.Token,
	)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}
