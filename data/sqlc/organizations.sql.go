// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: organizations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one

INSERT INTO organizations(name, owner_address, token)
VALUES ($1, $2, $3)
RETURNING id, name, created_at, owner_address, token
`

type CreateOrganizationParams struct {
	Name         string `json:"name"`
	OwnerAddress string `json:"ownerAddress"`
	Token        string `json:"token"`
}

// id	uuid [uuid_generate_v4()]
// name	character varying(60)
// created_at	timestamp
// owner_address	bytea
// token	bytea
func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.OwnerAddress, arg.Token)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getAllOrganizations = `-- name: GetAllOrganizations :many
SELECT id, name, created_at, owner_address, token FROM organizations WHERE id IN (SELECT organization_id FROM organization_members WHERE member_address=$1)
`

func (q *Queries) GetAllOrganizations(ctx context.Context, memberAddress string) ([]Organizations, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrganizations, memberAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organizations
	for rows.Next() {
		var i Organizations
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.OwnerAddress,
			&i.Token,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, created_at, owner_address, token FROM organizations
WHERE id = $1
`

// wtf?
// wdym?
// it expects uuid?
// nv
func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET
  name = $2,
  token = $3
WHERE id = $1
RETURNING id, name, created_at, owner_address, token
`

type UpdateOrganizationParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Token string    `json:"token"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name, arg.Token)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.OwnerAddress,
		&i.Token,
	)
	return i, err
}
