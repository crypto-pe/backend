// cryptope-api v0.0.1 80bfcc9b71a0aad1143b20f0fef71663a344ea5d
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "80bfcc9b71a0aad1143b20f0fef71663a344ea5d"


//
// Types
//

export var TokenType;
(function (TokenType) {
  TokenType["USDC"] = "USDC"
  TokenType["DAI"] = "DAI"
})(TokenType || (TokenType = {}))

export class Version {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['webrpcVersion'] = _data['webrpcVersion']
      this._data['schemaVersion'] = _data['schemaVersion']
      this._data['schemaHash'] = _data['schemaHash']
      this._data['appVersion'] = _data['appVersion']
      
    }
  }
  get webrpcVersion() {
    return this._data['webrpcVersion']
  }
  set webrpcVersion(value) {
    this._data['webrpcVersion'] = value
  }
  get schemaVersion() {
    return this._data['schemaVersion']
  }
  set schemaVersion(value) {
    this._data['schemaVersion'] = value
  }
  get schemaHash() {
    return this._data['schemaHash']
  }
  set schemaHash(value) {
    this._data['schemaHash'] = value
  }
  get appVersion() {
    return this._data['appVersion']
  }
  set appVersion(value) {
    this._data['appVersion'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Account {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['address'] = _data['address']
      this._data['name'] = _data['name']
      this._data['createdAt'] = _data['createdAt']
      this._data['email'] = _data['email']
      this._data['-'] = _data['-']
      
    }
  }
  get address() {
    return this._data['address']
  }
  set address(value) {
    this._data['address'] = value
  }
  get name() {
    return this._data['name']
  }
  set name(value) {
    this._data['name'] = value
  }
  get createdAt() {
    return this._data['createdAt']
  }
  set createdAt(value) {
    this._data['createdAt'] = value
  }
  get email() {
    return this._data['email']
  }
  set email(value) {
    this._data['email'] = value
  }
  get -() {
    return this._data['-']
  }
  set -(value) {
    this._data['-'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Organization {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['id'] = _data['id']
      this._data['name'] = _data['name']
      this._data['createdAt'] = _data['createdAt']
      this._data['ownerAddress'] = _data['ownerAddress']
      this._data['token'] = _data['token']
      
    }
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  get name() {
    return this._data['name']
  }
  set name(value) {
    this._data['name'] = value
  }
  get createdAt() {
    return this._data['createdAt']
  }
  set createdAt(value) {
    this._data['createdAt'] = value
  }
  get ownerAddress() {
    return this._data['ownerAddress']
  }
  set ownerAddress(value) {
    this._data['ownerAddress'] = value
  }
  get token() {
    return this._data['token']
  }
  set token(value) {
    this._data['token'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class OrganizationMember {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['organizationID'] = _data['organizationID']
      this._data['memberAddress'] = _data['memberAddress']
      this._data['dateJoined'] = _data['dateJoined']
      this._data['role'] = _data['role']
      this._data['isAdmin'] = _data['isAdmin']
      this._data['salary'] = _data['salary']
      
    }
  }
  get organizationID() {
    return this._data['organizationID']
  }
  set organizationID(value) {
    this._data['organizationID'] = value
  }
  get memberAddress() {
    return this._data['memberAddress']
  }
  set memberAddress(value) {
    this._data['memberAddress'] = value
  }
  get dateJoined() {
    return this._data['dateJoined']
  }
  set dateJoined(value) {
    this._data['dateJoined'] = value
  }
  get role() {
    return this._data['role']
  }
  set role(value) {
    this._data['role'] = value
  }
  get isAdmin() {
    return this._data['isAdmin']
  }
  set isAdmin(value) {
    this._data['isAdmin'] = value
  }
  get salary() {
    return this._data['salary']
  }
  set salary(value) {
    this._data['salary'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Payment {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['paymentID'] = _data['paymentID']
      this._data['organizationID'] = _data['organizationID']
      this._data['memberAddress'] = _data['memberAddress']
      this._data['transactionHash'] = _data['transactionHash']
      this._data['amount'] = _data['amount']
      this._data['token'] = _data['token']
      this._data['date'] = _data['date']
      
    }
  }
  get paymentID() {
    return this._data['paymentID']
  }
  set paymentID(value) {
    this._data['paymentID'] = value
  }
  get organizationID() {
    return this._data['organizationID']
  }
  set organizationID(value) {
    this._data['organizationID'] = value
  }
  get memberAddress() {
    return this._data['memberAddress']
  }
  set memberAddress(value) {
    this._data['memberAddress'] = value
  }
  get transactionHash() {
    return this._data['transactionHash']
  }
  set transactionHash(value) {
    this._data['transactionHash'] = value
  }
  get amount() {
    return this._data['amount']
  }
  set amount(value) {
    this._data['amount'] = value
  }
  get token() {
    return this._data['token']
  }
  set token(value) {
    this._data['token'] = value
  }
  get date() {
    return this._data['date']
  }
  set date(value) {
    this._data['date'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Token {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['address'] = _data['address']
      this._data['metadata'] = _data['metadata']
      this._data['decimals'] = _data['decimals']
      
    }
  }
  get address() {
    return this._data['address']
  }
  set address(value) {
    this._data['address'] = value
  }
  get metadata() {
    return this._data['metadata']
  }
  set metadata(value) {
    this._data['metadata'] = value
  }
  get decimals() {
    return this._data['decimals']
  }
  set decimals(value) {
    this._data['decimals'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class API {
  constructor(hostname, fetch) {
    this.path = '/rpc/API/'
    this.hostname = hostname
    this.fetch = fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  ping = (headers) => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: (_data.status)
        }
      })
    })
  }
  
  version = (headers) => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: new Version(_data.version)
        }
      })
    })
  }
  
  getSupportedTokens = (headers) => {
    return this.fetch(
      this.url('GetSupportedTokens'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          tokens: (_data.tokens)
        }
      })
    })
  }
  
  createAccount = (args, headers) => {
    return this.fetch(
      this.url('CreateAccount'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: (_data.status), 
          jwtToken: (_data.jwtToken), 
          account: new Account(_data.account)
        }
      })
    })
  }
  
  login = (args, headers) => {
    return this.fetch(
      this.url('Login'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          jwtToken: (_data.jwtToken), 
          account: new Account(_data.account)
        }
      })
    })
  }
  
  getAccount = (args, headers) => {
    return this.fetch(
      this.url('GetAccount'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          account: new Account(_data.account)
        }
      })
    })
  }
  
  updateAccount = (args, headers) => {
    return this.fetch(
      this.url('UpdateAccount'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: (_data.updateStatus), 
          account: new Account(_data.account)
        }
      })
    })
  }
  
  deleteAccount = (args, headers) => {
    return this.fetch(
      this.url('DeleteAccount'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: (_data.deleteStatus)
        }
      })
    })
  }
  
  createOrganization = (args, headers) => {
    return this.fetch(
      this.url('CreateOrganization'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          createStatus: (_data.createStatus), 
          organization: new Organization(_data.organization)
        }
      })
    })
  }
  
  getOrganization = (args, headers) => {
    return this.fetch(
      this.url('GetOrganization'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          organization: new Organization(_data.organization)
        }
      })
    })
  }
  
  updateOrganization = (args, headers) => {
    return this.fetch(
      this.url('UpdateOrganization'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: (_data.updateStatus), 
          organization: new Organization(_data.organization)
        }
      })
    })
  }
  
  deleteOrganization = (args, headers) => {
    return this.fetch(
      this.url('DeleteOrganization'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: (_data.deleteStatus)
        }
      })
    })
  }
  
  createOrganizationMember = (args, headers) => {
    return this.fetch(
      this.url('CreateOrganizationMember'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          createStatus: (_data.createStatus), 
          organizationMember: new OrganizationMember(_data.organizationMember)
        }
      })
    })
  }
  
  getOrganizationMember = (args, headers) => {
    return this.fetch(
      this.url('GetOrganizationMember'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          organizationMember: new OrganizationMember(_data.organizationMember)
        }
      })
    })
  }
  
  getAllOrganizationMembers = (args, headers) => {
    return this.fetch(
      this.url('GetAllOrganizationMembers'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          organizationMembers: (_data.organizationMembers)
        }
      })
    })
  }
  
  updateOrganizationMember = (args, headers) => {
    return this.fetch(
      this.url('UpdateOrganizationMember'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: (_data.updateStatus), 
          organizationMember: new OrganizationMember(_data.organizationMember)
        }
      })
    })
  }
  
  deleteOrganizationMember = (args, headers) => {
    return this.fetch(
      this.url('DeleteOrganizationMember'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: (_data.deleteStatus)
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
