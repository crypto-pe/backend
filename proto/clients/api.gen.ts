/* eslint-disable */
// cryptope-api v0.0.1 2ac7f0967c03f23c06028eb925b15750f07a477c
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "2ac7f0967c03f23c06028eb925b15750f07a477c"


//
// Types
//
export enum TokenType {
  USDC = 'USDC',
  DAI = 'DAI'
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface Account {
  address: string
  name: string
  createdAt: string
  email: string
  
}

export interface Organization {
  id: string
  name: string
  createdAt: string
  ownerAddress: string
  token: TokenType
}

export interface OrganizationMember {
  organizationID: string
  memberAddress: string
  dateJoined: string
  role: string
  isAdmin: boolean
  salary: number
}

export interface Payment {
  paymentID: string
  organizationID: string
  memberAddress: string
  transactionHash: string
  amount: number
  token: TokenType
  date: string
}

export interface Token {
  address: string
  metadata: {[key: string]: any}
  decimals: number
}

export interface API {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  getSupportedTokens(headers?: object): Promise<GetSupportedTokensReturn>
  createAccount(args: CreateAccountArgs, headers?: object): Promise<CreateAccountReturn>
  login(args: LoginArgs, headers?: object): Promise<LoginReturn>
  getAccount(args: GetAccountArgs, headers?: object): Promise<GetAccountReturn>
  updateAccount(args: UpdateAccountArgs, headers?: object): Promise<UpdateAccountReturn>
  deleteUser(args: DeleteUserArgs, headers?: object): Promise<DeleteUserReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface GetSupportedTokensArgs {
}

export interface GetSupportedTokensReturn {
  tokens: Array<Token>  
}
export interface CreateAccountArgs {
  ethAuthProofString: string
  name: string
  email: string
}

export interface CreateAccountReturn {
  status: boolean
  jwtToken: string
  account: Account  
}
export interface LoginArgs {
  ethAuthProofString: string
}

export interface LoginReturn {
  jwtToken: string
  account: Account  
}
export interface GetAccountArgs {
  address: string
}

export interface GetAccountReturn {
  account: Account  
}
export interface UpdateAccountArgs {
  address: string
  name: string
  email: string
}

export interface UpdateAccountReturn {
  updateStatus: boolean
  account: Account  
}
export interface DeleteUserArgs {
  address: string
}

export interface DeleteUserReturn {
  deleteStatus: boolean  
}


  
//
// Client
//
export class API implements API {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/API/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  getSupportedTokens = (headers?: object): Promise<GetSupportedTokensReturn> => {
    return this.fetch(
      this.url('GetSupportedTokens'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          tokens: <Array<Token>>(_data.tokens)
        }
      })
    })
  }
  
  createAccount = (args: CreateAccountArgs, headers?: object): Promise<CreateAccountReturn> => {
    return this.fetch(
      this.url('CreateAccount'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          jwtToken: <string>(_data.jwtToken), 
          account: <Account>(_data.account)
        }
      })
    })
  }
  
  login = (args: LoginArgs, headers?: object): Promise<LoginReturn> => {
    return this.fetch(
      this.url('Login'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          jwtToken: <string>(_data.jwtToken), 
          account: <Account>(_data.account)
        }
      })
    })
  }
  
  getAccount = (args: GetAccountArgs, headers?: object): Promise<GetAccountReturn> => {
    return this.fetch(
      this.url('GetAccount'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          account: <Account>(_data.account)
        }
      })
    })
  }
  
  updateAccount = (args: UpdateAccountArgs, headers?: object): Promise<UpdateAccountReturn> => {
    return this.fetch(
      this.url('UpdateAccount'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: <boolean>(_data.updateStatus), 
          account: <Account>(_data.account)
        }
      })
    })
  }
  
  deleteUser = (args: DeleteUserArgs, headers?: object): Promise<DeleteUserReturn> => {
    return this.fetch(
      this.url('DeleteUser'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: <boolean>(_data.deleteStatus)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
